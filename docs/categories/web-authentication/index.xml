<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web authentication on Luu Nguyen Phat</title>
    <link>https://phatngluu.github.io/categories/web-authentication/</link>
    <description>Recent content in web authentication on Luu Nguyen Phat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Phat Nguyen Luu</copyright>
    <lastBuildDate>Sat, 03 Oct 2020 16:04:59 +0000</lastBuildDate><atom:link href="https://phatngluu.github.io/categories/web-authentication/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JWT - JSON Web Token 2</title>
      <link>https://phatngluu.github.io/posts/web-authentication/jwt-json-web-token-2/</link>
      <pubDate>Sat, 03 Oct 2020 16:04:59 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/web-authentication/jwt-json-web-token-2/</guid>
      <description>See video: https://www.youtube.com/watch?v=7Q17ubqLfaM
How JWT is created and verified: Structure of JWT and encode/decode How different services work with JWT Your system has 2 services are running. They share the same secret key for JWT.
Suppose a client has logged in the &amp;ldquo;Bank&amp;rdquo; service and client&amp;rsquo;s browser keep a JWT. So if the client want to log in &amp;ldquo;Retirement&amp;rdquo; service, the client can use JWT for authentication.</description>
    </item>
    
    <item>
      <title>Different ways to Authenticate a Web Application</title>
      <link>https://phatngluu.github.io/posts/web-authentication/different-ways-to-authenticate-a-web-application/</link>
      <pubDate>Sat, 03 Oct 2020 10:16:21 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/web-authentication/different-ways-to-authenticate-a-web-application/</guid>
      <description>OP: https://medium.com/@vivekmadurai/different-ways-to-authenticate-a-web-application-e8f3875c254a
Various ways of authentication:
 Cookie-Based authentication Token-Based authentication (SPA &amp;amp; RESTful) Third-party access(OAuth, API-token) OpenId SAML  Cookie-Based The client posts the login credential to the server, server verifies the credential and creates session id which is stored in server(state-full) and returned to client via set-cookie. On subsequent request the session id from the cookie is verified in the server and the request get processed.
Upon logout session id will be cleared from both client cookie and server.</description>
    </item>
    
  </channel>
</rss>
