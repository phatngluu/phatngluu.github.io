<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Luu Nguyen Phat</title>
    <link>https://phatngluu.github.io/posts/</link>
    <description>Recent content in Posts on Luu Nguyen Phat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Phat Nguyen Luu</copyright>
    <lastBuildDate>Thu, 17 Sep 2020 04:22:52 +0000</lastBuildDate><atom:link href="https://phatngluu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Cheatsheets</title>
      <link>https://phatngluu.github.io/posts/golang/go-cheatsheets/</link>
      <pubDate>Thu, 17 Sep 2020 04:22:52 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/go-cheatsheets/</guid>
      <description>Variables   Variable declaration:
var foo int var foo int = 42 foo := 23  Note: foo := 23 is short-form declaration, which can be valid in block scope.
  Can&amp;rsquo;t redeclare variables, but can shadow them:
package main ... var foo int = 1 func main() { var foo int = 2 fmt.Println(foo) } # Output: 2    All variables must be used, if not then the compiler will throw an error.</description>
    </item>
    
    <item>
      <title>03 - Captain Code - Go Module</title>
      <link>https://phatngluu.github.io/posts/golang/03-captain-code-go-module/</link>
      <pubDate>Tue, 15 Sep 2020 12:33:18 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/03-captain-code-go-module/</guid>
      <description>Go get trong GOPATH thì cài vào GOPATH và cả binary
go mod tidy # don dep thu vien khong dung go mod why # why do i need this go mod download # download nhugn thang trong require go mod get ./... # kiem tra tat ca file cua ban roi download go list -m all # liet ke het package minh   Import package, khong import file rieng le  HandlerFunc has signature: func(ResponseWriter, *Request).</description>
    </item>
    
    <item>
      <title>Learning Paths</title>
      <link>https://phatngluu.github.io/posts/springboot/learnpath/</link>
      <pubDate>Sun, 13 Sep 2020 15:41:21 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/springboot/learnpath/</guid>
      <description>https://spring.io/quickstart
 @GetMapping(&amp;quot;/hello&amp;quot;):tells Spring to use our hello() method to answer requests that get sent to the http://localhost:8080/hello address @RestController annotation tells Spring that this code describes an endpoint that should be made available over the web @RequestParam is telling Spring to expect a name value in the request, but if it’s not there, it will use the word “World” by default.  MVC  Fundamental pattern for web app development Model = data, View = the visual display that is populated, Controller = wires View + Model  Spring Controller  Spring bean Annotated for the servlet mapping Responds to incoming web requests Outputs a view or raw data  Template Engines  Spring supports several Thymeleaf - most popular Provides a DSL for HTML, leaving raw HTML documents Placeholders for dynamic data Rendering engine allows for final product  Spring Material Beginner https://www.</description>
    </item>
    
    <item>
      <title>[Basic - 02] Hibernate annotations</title>
      <link>https://phatngluu.github.io/posts/hibernate/03/</link>
      <pubDate>Sun, 13 Sep 2020 15:40:30 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/hibernate/03/</guid>
      <description>Tuy nhiên, tôi khuyến khích các bạn sử dụng các Annotation của Java Persistence API bởi vì sau này chúng ta muốn chuyển sang một ORM khác sẽ dễ dàng hơn mà không phải thay đổi code.
 @Entity @Entity được sử dụng để chú thích một class là một Entity.
Thuộc tính name của @Entity là không bắt buộc. Việc chỉ định rõ name của @Entity cho phép viết ngắn câu HSQL.</description>
    </item>
    
    <item>
      <title>[Basic - 01] Configurations and Mappings</title>
      <link>https://phatngluu.github.io/posts/hibernate/01/</link>
      <pubDate>Sun, 13 Sep 2020 15:38:54 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/hibernate/01/</guid>
      <description>Chúng ta sẽ sử dụng các Annotation để ánh xạ (mapping) class và property trong Java tương ứng với các table và column trong database.
User.java
package com.gpcoder.entities; import java.util.Date; import javax.persistence.Column; import javax.persistence.Entity; import javax.persistence.GeneratedValue; import javax.persistence.GenerationType; import javax.persistence.Id; import javax.persistence.Table; import lombok.Data; @Data @Entity @Table(name = &amp;#34;user&amp;#34;) public class User { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column private String fullname; @Column private String username; @Column private String password; @Column(name = &amp;#34;created_at&amp;#34;) private Date createdAt; @Column(name = &amp;#34;modified_at&amp;#34;) private Date modifiedAt; } Một số Annotation được sử dụng:</description>
    </item>
    
    <item>
      <title>[Basic - 05] For, If-else, Switch and Defer</title>
      <link>https://phatngluu.github.io/posts/golang/basic-05-for-if-else-switch-and-defer/</link>
      <pubDate>Sun, 13 Sep 2020 05:21:38 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/basic-05-for-if-else-switch-and-defer/</guid>
      <description>For Structure The basic for loop has three components separated by semicolons:
 the init statement: executed before the first iteration the condition expression: evaluated before every iteration the post statement: executed at the end of every iteration  Attention   The init statement will often be a short variable declaration, and the variables declared there are visible only in the scope of the for statement.
  The loop will stop iterating once condition false.</description>
    </item>
    
    <item>
      <title>[Basic - 04] Packages, variables and functions</title>
      <link>https://phatngluu.github.io/posts/golang/basic-04-packages-variables-and-functions/</link>
      <pubDate>Sun, 13 Sep 2020 03:55:37 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/basic-04-packages-variables-and-functions/</guid>
      <description>Functions func add(x int, y int) int { return x + y } # Can be shortened func add(x, y int) int { return x + y } # Function can return multiple values func swap(x, y string) (string, string) { return y, x }  Naked return statement:
# Return values are named x,y func split(sum int) (x, y int) { x = sum * 4 / 9 y = sum - x return # Naked return statement }  Naked return statements should be used only in short functions, as with the example shown here.</description>
    </item>
    
    <item>
      <title>[Basic - 03] Install your Go application on your machine</title>
      <link>https://phatngluu.github.io/posts/golang/basic-03-install-your-go-application-on-your-machine/</link>
      <pubDate>Sun, 13 Sep 2020 03:13:32 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/basic-03-install-your-go-application-on-your-machine/</guid>
      <description>Locate to your package, then use this command to discover the Go install path, where the go command will install the current package.
$ go list -f &#39;{{.Target}}&#39; /root/codekeeper/go/bin/hello  Add the Go install directory to your system&amp;rsquo;s shell path. By doing this way, you&amp;rsquo;ll be able to run your program&amp;rsquo;s executable without specifying where the executable is.
export PATH=$PATH:/root/codekeeper/go/bin/hello  Run the go install command to compile and install the package.</description>
    </item>
    
    <item>
      <title>[Basic - 02] Create a Go module</title>
      <link>https://phatngluu.github.io/posts/golang/basic-02-create-a-go-module/</link>
      <pubDate>Sat, 12 Sep 2020 12:22:56 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/basic-02-create-a-go-module/</guid>
      <description>See details here
In this tutorial you&amp;rsquo;ll create two modules:
 The first is a library which is intended to be imported by other libraries or applications. The second is a caller application which will use the first.  This tutorial&amp;rsquo;s sequence includes six brief topics that each illustrate a different part of the language.
 Create a module &amp;ndash; Write a small module with functions you can call from another module.</description>
    </item>
    
    <item>
      <title>Amazon</title>
      <link>https://phatngluu.github.io/posts/cloud/aws/</link>
      <pubDate>Sat, 12 Sep 2020 09:30:27 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/cloud/aws/</guid>
      <description>Amazon Create Instance https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html#ec2-launch-instance
Connect https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html
EC2
ssh -i MyKeyPair.pem ec2-user@13.212.25.226 Ubuntu
ssh -i MyKeyPair.pem ubuntu@54.169.249.248 NOTE:
SSH config
Host Vultr HostName 207.148.122.57 User root Host AWS_Ubuntu HostName 13.229.183.189 IdentityFile /Users/steven/.ssh/MyKeyPair.pem User ubuntu Change password sudo su - # switch user to root passwd ubuntu su ubuntu # switch user ubuntu </description>
    </item>
    
    <item>
      <title>Environment variables</title>
      <link>https://phatngluu.github.io/posts/linux/environment-variables/</link>
      <pubDate>Sat, 12 Sep 2020 09:30:27 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/linux/environment-variables/</guid>
      <description>Environment variables Export and unset export NAME=VALUE # Set unset NAME # Unset  Persisting env vars for current user When an environment variable is set from the shell using the export command, its existence ends when the user’s sessions ends.
To make an environment persistent for a user’s environment, we export the variable from the user’s profile script.
  Open the current user’s profile into a text editor</description>
    </item>
    
    <item>
      <title>Vultr</title>
      <link>https://phatngluu.github.io/posts/cloud/vultr/</link>
      <pubDate>Sat, 12 Sep 2020 09:30:27 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/cloud/vultr/</guid>
      <description>Vultr Watch above this video to:
  Deploy Vultr server
  Add SSH key: https://www.vultr.com/docs/how-do-i-generate-ssh-keys/
  Server login
  SSH config
Host Vultr HostName 207.148.122.57 User root     In your VS Code:
 Install Extension &amp;ldquo;Remote SSH&amp;rdquo; Watch the tutorial of the extension in the extension&amp;rsquo;s main page to connect the server  Or you can watch video as a reference for connecting with the server    Set up development environment   NodeJS: https://www.</description>
    </item>
    
    <item>
      <title>[Basic - 01] Get started with Go</title>
      <link>https://phatngluu.github.io/posts/golang/basic-package-module/</link>
      <pubDate>Fri, 11 Sep 2020 09:07:12 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/basic-package-module/</guid>
      <description>See details at: here
 Go Package là tập hợp các file trong cùng một thư mục, hướng tới xử lí một tập hợp các vấn đề có liên quan đến thứ mà Package đó hướng tới, ví dụ, trong thư mục user của mình mình có 3 file .go cùng xử lí các vấn đề liên quan đối với user thì mình sẽ đặt tên package là user, việc này giúp năng cao khả năng tái sử dụng code cho những project sau này.</description>
    </item>
    
    <item>
      <title>[Basic - 00] Setting up GOROOT, GOPATH</title>
      <link>https://phatngluu.github.io/posts/golang/basic-00-setting-up-goroot-gopath/</link>
      <pubDate>Fri, 11 Sep 2020 02:39:14 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/basic-00-setting-up-goroot-gopath/</guid>
      <description>Open ~/.bashrc file with vim to edit:
vim ~/.bashrc  Add following lines
export GOROOT=/usr/local/go export PATH=$PATH:$GOROOT/bin # Wherever, up to you export GOPATH=/root/codekeeper/go export PATH=$PATH:$GOPATH/bin </description>
    </item>
    
    <item>
      <title>01 Captain Code</title>
      <link>https://phatngluu.github.io/posts/golang/01/</link>
      <pubDate>Thu, 10 Sep 2020 17:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/01/</guid>
      <description>var ( x int y int z int ) var t int = 8 Number: uninitialized value in Go equals to 0
package main import &amp;#34;fmt&amp;#34; func main() { var x int x = 1 var y int = 1 // inferred 	var z = 4.5 // var t int 	// t = 8 	t := 8 // popular  // convert type 	t = int(z) t = float64(x) c := complex(4,3) } s := &amp;#34;CaptainCode&amp;#34; fmt.</description>
    </item>
    
    <item>
      <title>[Advanced] Annotation</title>
      <link>https://phatngluu.github.io/posts/java/advanced-annotation/</link>
      <pubDate>Thu, 10 Sep 2020 09:53:33 +0700</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/advanced-annotation/</guid>
      <description>Read detail at: https://cs-fundamentals.com/java-programming/java-annotations.php
Built-in Java Annotations    Annotation Name Applicable To Use Included in     Java Annotations Applied to Java code      @Override Member Methods Checks that this method overrides a method from its superclass java.lang   @Deprecated All annotable items Marks item as deprecated java.lang   @SuppressWarnings All annotable items except packages and annotations Suppress warning of given type java.</description>
    </item>
    
    <item>
      <title>[Advanced] JPA - What is it?</title>
      <link>https://phatngluu.github.io/posts/java/advanced-jpa/</link>
      <pubDate>Thu, 10 Sep 2020 09:53:14 +0700</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/advanced-jpa/</guid>
      <description>What is it?  Bất kỳ một ứng dụng nào cũng đều cần phải thực hiện các tháo tác (CRUD) đến database bằng việc lưu trữ, truy vấn dữ liệu. Chúng ta cần phải viết nhiều code để thực hiện các việc này. Với công nghệ JDBC trước đây, chúng ta phải thực hiện các việc: mở kết nối vào Database, tạo các Statement, ResultSet, … và sau cùng phải đóng tất cả các thứ đó lại.</description>
    </item>
    
    <item>
      <title>[Advanced] Reflection</title>
      <link>https://phatngluu.github.io/posts/java/advanced-reflection/</link>
      <pubDate>Thu, 10 Sep 2020 09:51:45 +0700</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/advanced-reflection/</guid>
      <description>Read detail at:
 https://o7planning.org/vi/10155/huong-dan-java-reflection https://viblo.asia/p/java-reflection-and-anotation-DbmvmWRMeAg  Reflection  Java Reflection giới thiệu một cách tiếp cận khác, bạn có thể truy cập vào một trường của một đối tượng nếu bạn biết tên của trường đó. Hoặc bạn có thể gọi một phương thức của đối tượng nếu bạn biết tên phương thức, các kiểu tham số của phương thức, và các giá trị tham số để truyền vào &amp;hellip;</description>
    </item>
    
    <item>
      <title>GOPATH Explained</title>
      <link>https://phatngluu.github.io/posts/golang/gopath-explained/</link>
      <pubDate>Wed, 09 Sep 2020 17:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/gopath-explained/</guid>
      <description>See details at: https://flaviocopes.com/go-gopath/
 Go programmers typically keep all their Go code in a single workspace.
A workspace contains many version control repositories (managed by Git, for example).
Each repository contains one or more packages.
 Libraries installed using go get will be put in $GOPATH/src
Commands installed using go get will be put in $GOPATH/bin</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/git/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/git/git/</guid>
      <description> Sign in to Github  git config --global user.email &amp;quot;you@example.com&amp;quot; git config --global user.name &amp;quot;Your Name&amp;quot; Create new repo on Github Initialize and stage changes and commit/push  git init # Staged all files changes git add . # Unstaged all files changes git rm -r --cached . # Commit git commit -m &amp;quot;Message&amp;quot; # Push git remote add &amp;lt;repo_name&amp;gt; &amp;lt;url&amp;gt; # run it first time git push -u origin master # run it first time git push --set-upstream &amp;lt;repo_name&amp;gt; master # run it first time # optional git push &amp;lt;repo_name&amp;gt; # run it next time </description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/j2ee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/j2ee/</guid>
      <description>https://niithanoi.edu.vn/j2ee-la-gi.html
Mục đích của J2EE Kiến trúc J2EE cung cấp các dịch vụ để đơn giản hóa các khó khăn phổ biến nhất mà các lập trình viên gặp phải khi xây dựng các ứng dụng / website hiện đại.
Ví dụ, một khó khăn phổ biến đối với phát triển website là làm thế nào để nhận / xử lý / trả về kết quả theo yêu cầu đến từ khách hàng trên website.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/_index/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/_index/</guid>
      <description>Tables of contents:
  Variables.md
  Operators.md
  [Classes and Objects.md](Classes and Objects.md)
     Lambda Expressions
 Method References    When to Use Nested Classes, Local Classes, Anonymous Classes, and Lambda Expressions
  Enum Types
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/01-declaring-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/01-declaring-classes/</guid>
      <description>Declaring Classes In general, class declarations can include these components, in order:
  Modifiers such as public, private, and a number of others that you will encounter later.
  The name of the class&amp;rsquo;s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.
  A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/02-declaring-member-variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/02-declaring-member-variables/</guid>
      <description>Declaring Member Variables There are several kinds of variables:
  Member variables in a class—these are called fields.
  Variables in a method or block of code—these are called local variables.
  Variables in method declarations—these are called parameters.
  Field declarations are composed of three components, in order:
 Zero or more modifiers, such as public or private. The field&amp;rsquo;s type. The field&amp;rsquo;s name.  Access Modifiers The first (left-most) modifier lets you control what other classes have access to a member field.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/03-defining-methods/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/03-defining-methods/</guid>
      <description>Defining Methods More generally, method declarations have six components, in order:
 Modifiers—such as public, private, and others you will learn about later. The return type—the data type of the value returned by the method, or void if the method does not return a value. The method name—the rules for field names apply to method names as well, but the convention is a little different. The parameter list in parenthesis—a comma-delimited list of input parameters, preceded by their data types, enclosed by parentheses, ().</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/04-providing-constructors-for-your-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/04-providing-constructors-for-your-classes/</guid>
      <description>Providing Constructors for Your Classes   Constructor declarations look like method declarations—except that they use the name of the class and have no return type.
  Constructor is called by the new operator: Bicycle myBike = new Bicycle(30, 0, 8);
 new Bicycle(30, 0, 8) creates space in memory for the object and initializes its fields.     Note   You cannot write two constructors that have the same number and type of arguments for the same class.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/05-passing-information-to-a-method-or-a-constructor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/classes/05-passing-information-to-a-method-or-a-constructor/</guid>
      <description>Passing Information to a Method or a Constructor Parameters refers to the list of variables in a method declaration. Arguments are the actual values that are passed in when the method is invoked. When you invoke a method, the arguments used must match the declaration&amp;rsquo;s parameters in type and order.
Parameter Types You can use any data type for a parameter of a method or a constructor. This includes primitive data types, such as doubles, floats, and integers,&amp;hellip; and reference data types, such as objects and arrays.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/more-on-classes/initializing-fields/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/more-on-classes/initializing-fields/</guid>
      <description>Initializing Fields  Initialization can be put on one line: public static int capacity = 10; If initialization requires some logic (for example, error handling or a for loop to fill a complex array), simple assignment is inadequate.  Instance variables can be initialized in constructors, where error handling or other logic can be used. For class variables, the Java programming language includes static initialization blocks.    Static Initialization Blocks A static initialization block is a normal block of code enclosed in braces, { }, and preceded by the static keyword.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/more-on-classes/understanding-class-members/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/more-on-classes/understanding-class-members/</guid>
      <description>Understanding Class Members Use static keyword for class fields and methods.
Instance variables and methods
Class variables   Is variables that are common to all objects. Also called static field.
  Accomplished with static modifier.
  Class Methods  Or static method, it could be invoked with the class name, without creating an instance of class. Accomplished with static modifier. Static methods cannot access instance variables and instance methods directly, they must use an object reference.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/nested-classes/01-nested-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/nested-classes/01-nested-classes/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/objects/creating-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/objects/creating-objects/</guid>
      <description>Creating Objects Point originOne = new Point(23, 94);
The statement has three parts (discussed in detail below):
 Declaration: The code set in bold are all variable declarations that associate a variable name with an object type. Instantiation: The new keyword is a Java operator that creates the object. Initialization: The new operator is followed by a call to a constructor, which initializes the new object.  Declaration You can also declare a reference variable on its own line.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/objects/using-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/class-and-objects/objects/using-objects/</guid>
      <description>Using Objects You may need to use the value of one of its fields, change one of its fields, or call one of its methods to perform an action.
Referencing an Object&amp;rsquo;s Fields Recall that the new operator returns a reference to an object. So you could use the value returned from new to access a new object&amp;rsquo;s fields:
int height = new Rectangle().height;
This statement creates a new Rectangle object and immediately gets its height.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/classes-and-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/classes-and-objects/</guid>
      <description>Classes and Objects Nested Classes Terminology: Nested classes are divided into two categories: static and non-static.
  static nested classes that are declared are called static nested classes.
  Non-static nested classes are called inner classes.
  Non-static nested classes (inner classes) have access to other members of the enclosing class, even if they are declared private.
  Static nested classes do not have access to other members of the enclosing class.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/lambda-expressions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/lambda-expressions/</guid>
      <description>Lambda Expressions https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/method-references/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/method-references/</guid>
      <description>Method References https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/operators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/operators/</guid>
      <description>Operators Summary of Operators The following quick reference summarizes the operators supported by the Java programming language.
Simple Assignment Operator = Simple assignment operator Arithmetic Operators + Additive operator (also used for String concatenation) - Subtraction operator * Multiplication operator / Division operator % Remainder operator Unary Operators + Unary plus operator; indicates positive value (numbers are positive without this, however) - Unary minus operator; negates an expression ++ Increment operator; increments a value by 1 -- Decrement operator; decrements a value by 1 !</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/java-oracle-tutorials/variables/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/java-oracle-tutorials/variables/</guid>
      <description>Variables Primitive Data Types   byte &amp;lt; short &amp;lt; int &amp;lt; long: 8, 16, 32, 64 bits
  float &amp;lt; double: 32, 64
  String is special, String objects technically not primitive.
  Default Values   Fields that are declared but not initialized will be set to a reasonable default by the compiler.
  Local variables are slightly different; the compiler never assigns a default value to an uninitialized local variable.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/maven/tutorial/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/maven/tutorial/</guid>
      <description>Full article: https://www.baeldung.com/maven
POM - Project Object Model Describes the project, manages dependencies and configures plugins for building the software.
Defines the relationships among modules of multi-module projects.
Project Identifier Identifiers is to uniquely identify a project and specify how the project artifact should be packaged:
 groupId – a unique base name of the company or group that created the project artifactId – a unique name of the project version – a version of the project packaging – a packaging method (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/milestones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/milestones/</guid>
      <description>Milestones for Java developer Basics Core Java Tutorial
Maven https://www.javatpoint.com/maven-tutorial
Advances Learning Java Threads
Learning Java Lambda Expressions
Java: Testing with JUnit
Java-EE-Concurrency-Multithreading
Paths Become a Java developer
Become a Spring developer</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/regular-array-and-array-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/regular-array-and-array-list/</guid>
      <description>Comparison between regular array and ArrayList   Regular array has to know its size at the time it&amp;rsquo;s created but arraylist not.
  To put an object in regular array, you must assign it to a specific location.
   Arrays use array syntax that&amp;rsquo;s not used anywhere else in Java
  ArrayLists in Java 5.0 are parameterized
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/java/rules-for-overriding/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/java/rules-for-overriding/</guid>
      <description>Rules for overriding Original from: https://www.geeksforgeeks.org/overriding-in-java/
Rules:
 Arguments must the same, and return types must be compatible. The method can&amp;rsquo;t be less accessible  Cannot override:
 Final methods Private methods Constructor  Arguments must the same, and return types must be compatible. Whatever the superclass takes as an argument, the subclass overriding the method must use that same argument. And whatever the superclass declares as a return type, the overriding method must declare either the same type, or a subclass type.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/ajax/what-is-ajax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/ajax/what-is-ajax/</guid>
      <description>AJAX enables you update HTML without loading a new webpage
  It sends a request to server, and uses Javascript to update the response to current page.
  AJAX has another name: &amp;ldquo;XMLHttpRequest Object&amp;rdquo; (XHR)
 How AJAX works  Create an XMLHTTP Request object. Create a callback function. Open a request. GET/POST? Send the request.  Example var request = new XMLHttpRequest(); request.onreadystatechange = function () { if (request.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/async/01-async-in-js/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/async/01-async-in-js/</guid>
      <description>Being able to get other work done in the meantime is the basis of of async programming.
 Full text: https://teamtreehouse.com/library/asynchronous-programming-with-javascript/what-is-asynchronous-programming/the-javascript-call-stack
What is the Call Stack, and Why Does it Matter?   JavaScript runtime (or host) environments like the browser and Node have a built-in interpreter that executes JavaScript code. It&amp;rsquo;s called the JavaScript engine.
  The engine has a mechanism, called the call stack, for keeping track of the order of function calls and where it is in a program at any given moment.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/async/02-callback/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/async/02-callback/</guid>
      <description>Callback Functions  A callback function is a function passed into another function as an argument. The function that receives the callback function is often referred to as the &amp;ldquo;parent&amp;rdquo; function. The parent function will, at some point in the future, execute or call the callback.
 Examples function getUserName(callback) { const name = prompt(&amp;#39;What is your name?&amp;#39;); callback(name); } function greeting(name) { alert(&amp;#39;Hello, &amp;#39; + name); } getUserName(greeting); // a reference to the greeting function is passed to the function DOM Events btn.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/async/03-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/async/03-project/</guid>
      <description>Project &amp;ldquo;Async Programming and Callback Functions&amp;rdquo; const astrosUrl = &amp;#39;http://api.open-notify.org/astros.json&amp;#39;; const wikiUrl = &amp;#39;https://en.wikipedia.org/api/rest_v1/page/summary/&amp;#39;; const peopleList = document.getElementById(&amp;#39;people&amp;#39;); const btn = document.querySelector(&amp;#39;button&amp;#39;); // Make an AJAX request function getJSON(url, callback) { const xhr = new XMLHttpRequest(); xhr.open(&amp;#39;GET&amp;#39;, url); xhr.onload = () =&amp;gt; { if(xhr.status === 200) { let data = JSON.parse(xhr.responseText); console.log(data); return callback(data); } }; xhr.send(); } // Generate the markup for each profile function generateHTML(data) { const section = document.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/async/04-promise/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/async/04-promise/</guid>
      <description>What is a Promise? Formal:
 Promise is the eventual value or result of an async operation.
 Informal:
 It&amp;rsquo;s like a pager (The Coffee House). It informs user whenever the &amp;ldquo;async action&amp;rdquo; was resolved or rejected.
 How does promise work? Promise states Pending, Resolved and Rejected.
Working with promises  Create a promise instance using the Promise() constructor Define what should happen when the promise is fulfilled or rejected.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/async/05-async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/async/05-async-await/</guid>
      <description>Async &amp;amp; Await Why? Async &amp;amp; Await makes Promises easier to work with. Async &amp;amp; Await helps avoid Promise hell.
Explaination on Youtube: https://www.youtube.com/watch?v=V_Kr9OSfDeU
Async function declaration   async function(...){...}
  async (...) =&amp;gt; {...}
  class Google { constructor() { ... } async function() { ... } }   Với từ khóa async này, ta có thể đợi các Promise (thao tác bất đồng bộ) xử lý trong hàm đó mà không tạm dừng luồng chính bằng từ khóa await như ví dụ trên.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/fetch-api/01-why-fetch-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/fetch-api/01-why-fetch-api/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/fetch-api/02-basic-fetch-request/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/fetch-api/02-basic-fetch-request/</guid>
      <description>const select = document.getElementById(&amp;#39;breeds&amp;#39;); const card = document.querySelector(&amp;#39;.card&amp;#39;); const form = document.querySelector(&amp;#39;form&amp;#39;); // ------------------------------------------ // FETCH FUNCTIONS // ------------------------------------------  function fetchData(url) { return fetch(url) .then(checkStatus) .then(res =&amp;gt; res.json()) .catch(err =&amp;gt; console.log(err)) } Promise.all([ fetchData(&amp;#39;https://dog.ceo/api/breeds/list&amp;#39;), fetchData(&amp;#39;https://dog.ceo/api/breeds/image/random&amp;#39;) ]) .then(data =&amp;gt; { const breedList = data[0].message; const randomImg = data[1].message; generateOptions(breedList); generateImage(randomImg); }) // ------------------------------------------ // HELPER FUNCTIONS // ------------------------------------------  function checkStatus(response) { if (response.ok) { return Promise.resolve(response); } else { return Promise.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/intellij/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/intellij/</guid>
      <description>#IDE #Java
Hello mọi người, hôm nay em sẽ giới thiệu đến mọi người IDE IntelliJ dùng để code các project Java.
Trước tiên em xin trình bày quá trình sử dụng IDE với Java trong quá khứ của em:
 Eclipse version 2019: 3 tháng, 09/2019 - 12/2019 IntelliJ: 2 tháng, 03/2020 - 05/2020 Eclipse Mars: 3 tuần, hiện tại đang dùng tại công ty HD Expertise.  Với thời gian cũng đủ lâu thì em có thể đưa ra nhận định rằng IntelliJ dùng đã hơn Eclipse.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/js-dom/01-getting-and-setting-text/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/js-dom/01-getting-and-setting-text/</guid>
      <description>Javascript and DOM Get an element document.getElementById(&#39;id&#39;); document.querySelector(&#39;p&#39;); // get the p element document.querySelector(&#39;p.description&#39;); // get the p element that has class &#39;description&#39; Getting and Setting Text Element.textContent
Element.innerHTML
Changing Element Attributes </description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/js-dom/dom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/js-dom/dom/</guid>
      <description>DOM Methods &amp;ldquo;Get&amp;rdquo; selection // Return first match HTML element document.getElementById(&amp;#39;a&amp;#39;); // Return HTML collection document.getElementsByTagName(&amp;#39;p&amp;#39;); document.getElementsByClassName(&amp;#39;className&amp;#39;); Query Selector querySelector returns the first element it matches, while querySelectorAll returns all elements it matches. MDN page for querySelector MDN page for querySelectorAll
// Selecting title attribute document.querySelector(&amp;#39;[title=MyTitle]&amp;#39;); document.querySelectorAll(&amp;#39;[title=MyTitle]&amp;#39;); // Selecting id const myElement = document.querySelector(&amp;#39;#myId&amp;#39;); // Selecting class const studentInfo = document.querySelectorAll(&amp;#39;.student-info&amp;#39;) // Selecting descendants `a` in `nav` let navigationLinks = document.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/js-pure/00-build-tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/js-pure/00-build-tools/</guid>
      <description>Package Managers  npm yarn  Module Bundlers Module bundlers combine all of your source code (and all of its dependencies) into a single, minified JavaScript file before it&amp;rsquo;s served to the browser. Module bundlers commonly used today in JavaScript development are Webpack, Rollup and Browserify. Parcel is also a new open source JavaScript module bundler that recently launched.
Compilers Javascript runtime environments (like the browser) only understand standard JavaScript. Modern, complex JavaScript applications often require more than pure JavaScript.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/js-pure/01-basic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/js-pure/01-basic/</guid>
      <description>Basic Syntax var &amp;amp; let use let as much as possible in your code, rather than var. There is no reason to use var, unless you need to support old versions of Internet Explorer with your code.
Dynamic typing JavaScript is a &amp;ldquo;dynamically typed language&amp;rdquo;, which means that, unlike some other languages, you don&amp;rsquo;t need to specify what data type a variable will contain (numbers, strings, arrays, etc).
let myNumber = &amp;#39;500&amp;#39;; // oops, this is still a string typeof myNumber; myNumber = 500; // much better — now this is a number typeof myNumber; Number let myNumber = &amp;#39;74&amp;#39;; myNumber + 3; You end up with the result &amp;lsquo;743&amp;rsquo;, not 77, because myNumber is actually defined as a string.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/js-pure/03-prototype/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/js-pure/03-prototype/</guid>
      <description>Prototype  Prototypes are the mechanism by which JavaScript objects inherit features from one another. Objective:  To understand object prototypes how prototype chains work how to add new methods onto the prototype.    Definition of prototype Objects can have a prototype object – a template object that inherits methods anh properties from.
  A prototype may have its own prototype:
  function Human(firstName, lastName) { this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/js-pure/04-inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/js-pure/04-inheritance/</guid>
      <description>Inheritance in JS JavaScript does not have classes like other languages. It uses the concept of prototypes and prototype chaining for inheritance.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/js-pure/05-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/js-pure/05-functions/</guid>
      <description>Functions Default value of function&amp;rsquo;s parameter Default parameter values can be boolean, number, function or string. Example:
function greet( name, partOfDay = &amp;#39;morning&amp;#39; ) { return `Good ${partOfDay}, ${name}!`; } Skip an argument when calling a function When calling a function with default parameters, which keyword acts as a placeholder for the argument you want to skip? =&amp;gt; undefined
Arrow functions   You can omit the parentheses, if there is single argument:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/objects/01-objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/objects/01-objects/</guid>
      <description>Javascript Objects Unlike Java, in Javascript, you can create an object without create its class.
Example on object declaration Object&amp;rsquo;s fields can be: array, int, string, function (like method in java).
Below is object declaration, note that it&amp;rsquo;s not class declaration:
const person = { name : { first: &amp;#39;Bob&amp;#39;, last: &amp;#39;Smith&amp;#39; }, age: 32, gender: &amp;#39;male&amp;#39;, interests: [&amp;#39;music&amp;#39;, &amp;#39;skiing&amp;#39;], bio: function() { alert(this.name.first + &amp;#39; &amp;#39; + this.name.last + &amp;#39; is &amp;#39; + this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/objects/02-classes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/objects/02-classes/</guid>
      <description>In 01 Objects.md, we declares object by object literals. As such, you can only define of an object. We&amp;rsquo;re going to learn a new way of declaring related objects by grouping them into a class.
Declaring a class // Declaring a class class Pet { constructor(animal, age, breed, sound) { this.animal = animal; this.age = age; this.breed = breed; this.sound = sound; } speak() { console.log(this.sound); } } // Creating instances of class const money = new Pet(&amp;#39;cho&amp;#39;, 7, &amp;#39;longxu&amp;#39;, &amp;#39;yip yip&amp;#39;); const mina = new Pet(&amp;#39;cho&amp;#39;, 4, &amp;#39;longxu&amp;#39;, &amp;#39;woof woof&amp;#39;); money.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://phatngluu.github.io/posts/javascript/objects/03-getters-setters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/javascript/objects/03-getters-setters/</guid>
      <description>Getter &amp;amp; Setter class Pet { constructor(animal, age, breed) { this.animal = animal; this.age = age; this.breed = breed; } get owner(){ return this._owner; } set owner(owner) { this._owner = owner; } } const ernie = new Pet(&amp;#39;dog&amp;#39;, 1, &amp;#39;pug&amp;#39;); ernie.owner = &amp;#34;Ashley&amp;#34;; // setter ernie.owner; // getter console.log(ernie); // object Console:
 Pet { animal: &#39;dog&#39;, age: 1, breed: &#39;pug&#39;, _owner: &#39;Ash&#39; } 
 NOTE:
  Calling getter by its name without parentheses.</description>
    </item>
    
    <item>
      <title>00 Captain Code Golang</title>
      <link>https://phatngluu.github.io/posts/golang/go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://phatngluu.github.io/posts/golang/go/</guid>
      <description>Nhung cai duoc Go tai ve se duoc luu tai src
go get github.com/letung3105/demo
Neu package
Go module
Go run chay code
Go build
Go install -&amp;gt; build file &amp;amp; bo vo folder bin</description>
    </item>
    
  </channel>
</rss>
